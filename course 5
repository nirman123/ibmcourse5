Question 1: Use yfinance to Extract Stock Data
Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.

tesla=yf.Ticker("TSLA")
Using the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to max so we get information for the maximum amount of time.

tesla_data=tesla.history(period="max")
Reset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.

tesla_data.reset_index(inplace=True)
tesla_data.head()

Question 2: Use Webscraping to Extract Tesla Revenue Data
Use the requests library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm Save the text of the response as a variable named html_data.

url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
data  = requests.get(url).text
​
Parse the html data using beautiful_soup.

soup = BeautifulSoup(data, 'html5lib')
Using BeautifulSoup or the read_html function extract the table with Tesla Revenue and store it into a dataframe named tesla_revenue. The dataframe should have columns Date and Revenue.

Click here if you need help locating the table
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
tesla_revenue1 = pd.read_html(url)
Execute the following line to remove the comma and dollar sign from the Revenue column.

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")
Execute the following lines to remove an null or empty strings in the Revenue column.

tesla_revenue.dropna(inplace=True)
​
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
Display the last 5 row of the tesla_revenue dataframe using the tail function. Take a screenshot of the results.

tesla_revenue = tesla_revenue1[1]
 
tesla_revenue.tail()


# Method 2: Using Pandas read_html (Changing the column name in order to make the make_graph function work)
tesla_revenue_tables = pd.read_html(url)

# Check the tables to find the one with the data
for i, table in enumerate(tesla_revenue_tables):
    print(f"Table {i}:\n{table.head()}\n")

# Assuming the data is in the second table (index 1)
tesla_revenue = tesla_revenue_tables[1]

# Rename columns to "Date" and "Revenue"
tesla_revenue.columns = ["Date", "Revenue"]

# Drop any rows with missing values
tesla_revenue = tesla_revenue.dropna()

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

print("Using Pandas read_html:")
print(tesla_revenue.tail())

Question 3: Use yfinance to Extract Stock Data
Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.

gme=yf.Ticker("GME")
Using the ticker object and the function history extract stock information and save it in a dataframe named gme_data. Set the period parameter to max so we get information for the maximum amount of time.

gme_data=gme.history(period="max")
gme_data=gme.history(period="max")
Reset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.

gme_data.reset_index(inplace=True)
gme_data.head()
gme_data.reset_index(inplace=True)
gme_data.head()

Question 4: Use Webscraping to Extract GME Revenue Data
Use the requests library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named html_data.

url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
Parse the html data using beautiful_soup.

soup = BeautifulSoup(data, 'html5lib')
Using BeautifulSoup or the read_html function extract the table with GameStop Revenue and store it into a dataframe named gme_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column using a method similar to what you did in Question 2.

Click here if you need help locating the table
gme_revenue1 = pd.read_html(url)
Display the last five rows of the gme_revenue dataframe using the tail function. Take a screenshot of the results.

gme
gme_revenue = gme_revenue1[1]
​
gme_revenue.tail()
​
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
​
# Method 2: Using Pandas read_html (Changing the column name in order for the make_graph function to implement)
gme_revenue_tables = pd.read_html(url)
​
# Check the tables to find the one with the data
for i, table in enumerate(gme_revenue_tables):
    print(f"Table {i}:\n{table.head()}\n")
​
# Assuming the data is in the second table (index 1)
gme_revenue = gme_revenue_tables[1]
​
# Rename columns to "Date" and "Revenue"
gme_revenue.columns = ["Date", "Revenue"]
​
# Drop any rows with missing values
gme_revenue = gme_revenue.dropna()
​
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")
​
print("Using Pandas read_html:")
print(gme_revenue.tail())

  Question 5: Plot Tesla Stock Graph
Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, 'Tesla'). Note the graph will only show data upto June 2021.

make_graph(tesla_data, tesla_revenue,'Tesla')

  Question 6: Plot GameStop Stock Graph
Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop'). Note the graph will only show data upto June 2021.

make_graph(gme_data, gme_revenue, 'gme')
